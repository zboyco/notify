type (
	WxPusherCallbackRequest {
		Action string                      `json:"action"` // 操作
		Data   WxPusherCallbackRequestData `json:"data"`   // 数据
	}
	WxPusherCallbackRequestData {
		AppID   int64  `json:"appId"`             // 应用ID
		AppName string `json:"appName"`           // 应用名称
		UID     string `json:"uid"`               // 用户ID
		Source  string `json:"source,omitempty"`  // 订阅来源
		Time    int    `json:"time"`              // 消息时间
		Extra   string `json:"extra,omitempty"`   // 额外数据
		Content string `json:"content,omitempty"` // 消息内容
	}

	ChannelCreateRequest {
		Auth
		Channel
	}

	ChannelListRequest {
		Auth
		Pager
	}

	ChannelByNameRequest {
		Auth
		ChannelName string `path:"channelName"` // 渠道名称
	}

	ChannelUpdateRequest {
		Auth
		Channel
		ChannelName string `path:"channelName"` // 渠道名称
	}

	ChannelListResponse {
		Total int64      `json:"total"` // 总数
		Data  []*Channel `json:"data"`  // 数据
	}

	Channel {
		BaseModel
		Name         string `json:"name"`                          // 渠道名称
		Sender       string `json:"sender,options=wxpusher|xizhi"` // 发送者
		WechatUserID string `json:"wechatUserID,optional"`         // 微信用户ID
		Topic        string `json:"topic,optional"`                // 主题
		SubscribeURL string `json:"subscribeUrl,optional"`         // 订阅地址
		SubscribeQr  string `json:"subscribeQr,optional"`          // 订阅二维码
		Remark       string `json:"remark,optional"`               // 备注
	}

	NotifyCreateRequest {
		Auth
		Notify
		ChannelName string `json:"channelName"` // 渠道名称
	}

	NotifyListRequest {
		Auth
		Pager
		Completed *bool `form:"completed,optional"` // 状态
	}

	NotifyByIDRequest {
		Auth
		NotifyID uint `path:"notifyID"` // 消息ID
	}

	NotifyListResponse {
		Total int64     `json:"total"` // 总数
		Data  []*Notify `json:"data"`  // 数据
	}

	Notify {
		BaseModel
		ChannelID      uint   `json:"channelID,optional"`                   // 渠道ID
		Title          string `json:"title"`                                // 标题
		Content        string `json:"content,optional"`                     // 内容
		MaxNotifyCount int    `json:"maxNotifyCount,range=[-1:],default=1"` // 最大通知次数，-1为不限制
		NotifyCount    int    `json:"notifyCount,optional"`                 // 已通知次数
		StartAt        int    `json:"startAt"`                              // 开始时间
		EndAt          int    `json:"endAt,optional"`                       // 结束时间
		Spec           string `json:"spec,optional"`                        // Cron表达式（循环有效）
		LastNotifyAt   int    `json:"lastNotifyAt,optional"`                // 最后通知时间
		Completed      bool   `json:"completed,optional,default=false"`     // 完成标识
	}

	BaseModel {
		ID        uint `json:"id,optional"`        // ID
		CreatedAt int  `json:"createdAt,optional"` // 创建时间
		UpdatedAt int  `json:"updatedAt,optional"` // 更新时间
	}

	Auth {
		Token string `header:"token"` // 请求Token
	}

	Pager {
		Limit  int `form:"limit,default=10"` // 每页数量
		Offset int `form:"offset,default=0"` // 偏移量
	}
)

service notify-api {
	@doc(
		summary: wxpusher回调
	)
	@handler wxpusherCallback
	post /v0/wxpusher/callback(WxPusherCallbackRequest)
}

@server(
	middleware: Auth // 路由中间件声明
)
service notify-api {
	@doc(
		summary: 重置定时任务
	)
	@handler resetCron
	post /v0/cron/reset(Auth)
	
	@doc(
		summary: 创建渠道
	)
	@handler channelCreate
	post /v0/channels(ChannelCreateRequest)
	
	@doc(
		summary: 获取渠道列表
	)
	@handler channelList
	get /v0/channels(ChannelListRequest) returns (ChannelListResponse)
	
	@doc(
		summary: 获取渠道详情
	)
	@handler channelGet
	get /v0/channels/:channelName(ChannelByNameRequest) returns (Channel)
	
	@doc(
		summary: 更新渠道
	)
	@handler channelUpdate
	put /v0/channels/:channelName(ChannelUpdateRequest)
	
	@doc(
		summary: 删除渠道
	)
	@handler channelDelete
	delete /v0/channels/:channelName(ChannelByNameRequest)
	
	@doc(
		summary: 创建通知
	)
	@handler notifyCreate
	post /v0/notifies(NotifyCreateRequest)
	
	@doc(
		summary: 获取通知列表
	)
	@handler notifyList
	get /v0/notifies(NotifyListRequest) returns (NotifyListResponse)
	
	@doc(
		summary: 获取通知详情
	)
	@handler notifyGet
	get /v0/notifies/:notifyID(NotifyByIDRequest) returns (Notify)
	
	@doc(
		summary: 删除通知
	)
	@handler notifyDelete
	delete /v0/notifies/:notifyID(NotifyByIDRequest)
}